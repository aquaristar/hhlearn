from bs4 import BeautifulSoupimport reimport structfrom Crypto.Cipher import DESfrom django.db import modelsfrom datetime import datetimefrom datetime import timedeltafrom pytz import timezoneimport pytzfrom django.db.models import Countfrom apps.dashboard.models import *from apps.resources.models import *def possessive(name):    if name[-1] == 's':        return name + "'"    else:        return name + "'s"def replace_tags(request, raw_html, is_resouce_replace=False):    if raw_html == None or raw_html == '':        return ''    #prepare replace code pattern        pattern = '{{\s*([^} ]+)\s*}}'    regex = re.compile(pattern, re.IGNORECASE)    #prepare user relation data    user = request.user    user_profile = request.user.core_user_profile    organization = request.user.core_user_profile.core_organization.get(        user_profiles__id=request.user.core_user_profile.id)    department = request.user.core_user_profile.department    job_title = request.user.core_user_profile.job_title    location = request.user.core_user_profile.location    state = location.state.abbreviation        if department is not None:        officials = department.officials            elif location is not None:        officials = location.officials            #get accreditation agency    if user_profile.department_id is not None:                        container = user_profile.department                   else:                        container = user_profile.location        if container.is_accredited_id == 1:        accreditation_agency_id = container.accreditation_agency_id            else:        accreditation_agency_id = 0            #get services offered    services_offered = organization.services_offered.all()[0].id             #replace 'if' tags    sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)    while sm is not None:        em = re.search('{% endif %}', raw_html)        raw_html = raw_html[:sm.start()] + replace_elseif_statement(raw_html[sm.start():em.end()], state, services_offered, accreditation_agency_id) + raw_html[em.end():]        sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)    for match in regex.finditer(raw_html):        # print match.group(1)        short_tag = match.group(1)                tags_list = short_tag.split(':')        first_tag = tags_list[0]                if len(tags_list) > 1:            data_tag = short_tag.split(':')[1]        #check resource tags replaced        if is_resouce_replace == True:            if first_tag == 'COURSE_RESOURCE_FORM':                resource = CoreResources.objects.get(id=data_tag)                replace_html = '<font style="color:#00ABDF;">' + resource.resource_name + '</font>'                raw_html = raw_html.replace(match.group(0), replace_html)            elif first_tag == 'COURSE_RESOURCE_PUBLICATION':                resource = CoreResources.objects.get(id=data_tag)                replace_html = '<font style="color:#E30613;">' + resource.resource_name + '</font>'                raw_html = raw_html.replace(match.group(0), replace_html)                    elif first_tag == 'COURSE_RESOURCE_LANG_PUBLICATION':                resource = CoreResources.objects.get(id=data_tag)                replace_html = '<font style="color:#E30613;">' + resource.resource_name_language + '</font>'                raw_html = raw_html.replace(match.group(0), replace_html)            elif first_tag == 'COURSE_RESOURCE_LANG_FORM':                resource = CoreResources.objects.get(id=data_tag)                replace_html = '<font style="color:#00ABDF;">' + resource.resource_name_language + '</font>'                raw_html = raw_html.replace(match.group(0), replace_html)                        #check and replace tags        if first_tag == "USER":                        if data_tag == "NAME":                raw_html = raw_html.replace(match.group(0), user.username)            elif data_tag == "FIRST_NAME":                raw_html = raw_html.replace(match.group(0), user.first_name)            elif data_tag == "LAST_NAME":                raw_html = raw_html.replace(match.group(0), user.last_name)            elif data_tag == "EMAIL":                raw_html = raw_html.replace(match.group(0), user.email)                           elif first_tag == "ORG":                        if data_tag == 'NAME':                raw_html = raw_html.replace(match.group(0), organization.name)            elif data_tag == "ADD_DATE":                raw_html = raw_html.replace(match.group(0), organization.add_date)            elif data_tag == "ACTIVATION_DATE":                raw_html = raw_html.replace(match.group(0), organization.activation_date)        elif first_tag == "ORGS":                        if data_tag == 'NAME':                raw_html = raw_html.replace(match.group(0), possessive(organization.name))                elif first_tag == "JOB":            if data_tag == "NAME":                raw_html = raw_html.replace(match.group(0), job_title.name)            elif data_tag == "NAME_POSSESSIVE":                raw_html = raw_html.replace(match.group(0), job_title.name_possessive)            elif data_tag == "CUSTOM_NAME":                raw_html = raw_html.replace(match.group(0), job_title.name_custom)            elif data_tag == "CUSTOM_NAME_POSSESSIVE":                raw_html = raw_html.replace(match.group(0), job_title.name_custom_possessive)                        elif first_tag == "DEPARTMENT":            if department is not None:                if data_tag == "NAME":                            raw_html = raw_html.replace(match.group(0), department.short_name)                elif data_tag == "NO_OF_FIRE_EXISTS":                                raw_html = raw_html.replace(match.group(0), department.no_of_fire_exists)                elif data_tag == "WHERE_WRITTEN_HAZARD_LOCATED":                    raw_html = raw_html.replace(match.group(0), department.where_safety_data_located)                elif data_tag == "WHEN_HAZARD_PROG_AVAILABLE":                    raw_html = raw_html.replace(match.group(0), department.when_hazard_prog_available)                elif data_tag == "WHERE_SAFETY_DATA_LOCATED":                    raw_html = raw_html.replace(match.group(0), department.where_safety_data_located)                elif data_tag == "EMERGENCY_LOCATION":                    raw_html = raw_html.replace(match.group(0), department.emergency_location)                elif data_tag == "HIPPA_NOTICE_LOCATION":                    raw_html = raw_html.replace(match.group(0), department.hippa_notice_location)                elif data_tag == "IS_ACCREDITED":                    raw_html = raw_html.replace(match.group(0), department.is_accredited)                elif data_tag == "MIN_SCORE_GENERAL_KNOWLEDGE":                    raw_html = raw_html.replace(match.group(0), department.min_score_general_knowledge)                elif data_tag == "MIN_SCORE_CONTINUING_EDUCATION":                    raw_html = raw_html.replace(match.group(0), department.min_score_continuing_education)                elif data_tag == "MIN_SCORE_EMPLOYEE_COMPETENCY":                    raw_html = raw_html.replace(match.group(0), department.min_score_employee_competency)                elif data_tag == "MIN_SCORE_CUSTOM_COURSES":                    raw_html = raw_html.replace(match.group(0), department.min_score_custom_courses)            else:                raw_html = raw_html.replace(match.group(0), 'No data available')                elif first_tag == "LOCATIONS":            if data_tag == "NAME":                raw_html = raw_html.replace(match.group(0), possessive(location.short_name))        elif first_tag == "LOCATION":            if data_tag == "NAME":                raw_html = raw_html.replace(match.group(0), location.short_name)            elif data_tag == "STREET_ADDRESS_1":                raw_html = raw_html.replace(match.group(0), location.street_address_1)            elif data_tag == "STREET_ADDRESS_2":                raw_html = raw_html.replace(match.group(0), location.street_address_2)            elif data_tag == "CITY":                raw_html = raw_html.replace(match.group(0), location.city)            elif data_tag == "STATE":                raw_html = raw_html.replace(match.group(0), location.state.abbreviation)            elif data_tag == "ZIP_CODE":                raw_html = raw_html.replace(match.group(0), location.zip_code)            elif data_tag == "PHONE":                raw_html = raw_html.replace(match.group(0), location.phone)            elif data_tag == "FAX":                raw_html = raw_html.replace(match.group(0), location.fax)            elif data_tag == "NO_OF_FIRE_EXISTS":                raw_html = raw_html.replace(match.group(0), location.no_of_fire_exists)            elif data_tag == "WHERE_WRITTEN_HAZARD_LOCATED":                raw_html = raw_html.replace(match.group(0), location.where_written_hazard_located)            elif data_tag == "WHEN_HAZARD_PROG_AVAILABLE":                raw_html = raw_html.replace(match.group(0), location.when_hazard_prog_available)            elif data_tag == "WHERE_SAFETY_DATA_LOCATED":                raw_html = raw_html.replace(match.group(0), location.where_safety_data_located)            elif data_tag == "EER_LOCATION":                raw_html = raw_html.replace(match.group(0), location.eer_location)            elif data_tag == "WHEN_EER_AVAILABLE":                raw_html = raw_html.replace(match.group(0), location.when_eer_available)            elif data_tag == "EMR_LOCATION":                raw_html = raw_html.replace(match.group(0), location.emr_location)            elif data_tag == "WHEN_EMR_AVAILABLE":                raw_html = raw_html.replace(match.group(0), location.when_emr_available)            elif data_tag == "HIPPA_NOTICE_LOCATION":                raw_html = raw_html.replace(match.group(0), location.hippa_notice_location)            elif data_tag == "EMERGENCY_LOCATION":                raw_html = raw_html.replace(match.group(0), location.emergency_location)            elif data_tag == "USE_ELECTRONIC_POSTING":                raw_html = raw_html.replace(match.group(0), location.use_electronic_posting)            elif data_tag == "IS_ACCREDITED":                raw_html = raw_html.replace(match.group(0), location.is_accredited)            elif data_tag == "ACCREDITATION_AGENCY":                raw_html = raw_html.replace(match.group(0), location.accreditation_agency)            elif data_tag == "MIN_SCORE_GENERAL_KNOWLEDGE":                raw_html = raw_html.replace(match.group(0), location.min_score_general_knowledge)            elif data_tag == "MIN_SCORE_CONTINUING_EDUCATION":                raw_html = raw_html.replace(match.group(0), location.min_score_continuing_education)            elif data_tag == "MIN_SCORE_EMPLOYEE_COMPETENCY":                raw_html = raw_html.replace(match.group(0), location.min_score_employee_competency)            elif data_tag == "MIN_SCORE_CUSTOM_COURSES":                raw_html = raw_html.replace(match.group(0), location.min_score_custom_courses)            elif data_tag == "DEPARTMENTS_ENABLED":                raw_html = raw_html.replace(match.group(0), location.departments_enabled)            elif data_tag == "TOTAL_DEPARTMENTS":                raw_html = raw_html.replace(match.group(0), location.total_departments)            elif data_tag == "IS_ACTIVE":                raw_html = raw_html.replace(match.group(0), location.is_active)            elif data_tag == "STATE_LONGNAME":                raw_html = raw_html.replace(match.group(0), location.state.name)            elif data_tag == "STATES_LONGNAME":                raw_html = raw_html.replace(match.group(0), location.state.name_possessive)                elif first_tag == "OSHA":            #get osha data            osha_data = UtilRegAgencies.objects.filter(classification_id=3, subclassification_id=17, state=location.state.abbreviation)            if len(osha_data) > 0:                osha_data = osha_data[0]            else:                osha_data = UtilRegAgencies.objects.filter(id=1)[0]                        if data_tag == "NAME":                raw_html = raw_html.replace(match.group(0), osha_data.name)            elif data_tag == 'ADDRESS1':                raw_html = raw_html.replace(match.group(0), osha_data.address1)            elif data_tag == 'CITY':                raw_html = raw_html.replace(match.group(0), osha_data.city)            elif data_tag == 'STATE':                raw_html = raw_html.replace(match.group(0), osha_data.state)            elif data_tag == 'ZIP':                raw_html = raw_html.replace(match.group(0), osha_data.zip)            elif data_tag == 'PHONE':                raw_html = raw_html.replace(match.group(0), osha_data.phone)            elif data_tag == 'TTY_PHONE':                if osha_data.tty_phone is not None:                    raw_html = raw_html.replace(match.group(0), osha_data.tty_phone)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'FAX':                if osha_data.fax is not None:                    raw_html = raw_html.replace(match.group(0), osha_data.fax)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'EMAIL':                if osha_data.email is not None:                    raw_html = raw_html.replace(match.group(0), osha_data.email)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'WEBSITE':                raw_html = raw_html.replace(match.group(0), osha_data.website)            elif data_tag == 'ACRONYM':                if osha_data.acronym is not None:                    raw_html = raw_html.replace(match.group(0), osha_data.acronym)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')        elif first_tag == "STATE_DOH":            #get state doh data                state_doh = UtilRegAgencies.objects.filter(classification_id=3, subclassification_id=22, state=location.state.abbreviation)            if len(state_doh) > 0:                state_doh = state_doh[0]            else:                state_doh = UtilRegAgencies.objects.filter(id=1)            if data_tag == "NAME":                raw_html = raw_html.replace(match.group(0), state_doh.name)            elif data_tag == 'ADDRESS1':                raw_html = raw_html.replace(match.group(0), state_doh.address1)            elif data_tag == 'CITY':                raw_html = raw_html.replace(match.group(0), state_doh.city)            elif data_tag == 'STATE':                raw_html = raw_html.replace(match.group(0), state_doh.state)            elif data_tag == 'ZIP':                raw_html = raw_html.replace(match.group(0), state_doh.zip)            elif data_tag == 'PHONE':                raw_html = raw_html.replace(match.group(0), state_doh.phone)            elif data_tag == 'TTY_PHONE':                if state_doh.tty_phone is not None:                    raw_html = raw_html.replace(match.group(0), state_doh.tty_phone)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'FAX':                if state_doh.fax is not None:                    raw_html = raw_html.replace(match.group(0), state_doh.fax)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'EMAIL':                if state_doh.email is not None:                    raw_html = raw_html.replace(match.group(0), state_doh.email)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'WEBSITE':                raw_html = raw_html.replace(match.group(0), state_doh.website)            elif data_tag == 'ACRONYM':                if state_doh.acronym is not None:                    raw_html = raw_html.replace(match.group(0), state_doh.acronym)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')        elif first_tag == "STATE_PHARMACY":            #get pharmacy doh data                state_pharmacy = UtilRegAgencies.objects.filter(classification_id=3, subclassification_id=18, state=location.state.abbreviation)            if len(state_pharmacy) > 0:                state_pharmacy = state_pharmacy[0]            else:                state_pharmacy = UtilRegAgencies.objects.filter(id=1)            if data_tag == "NAME":                raw_html = raw_html.replace(match.group(0), state_pharmacy.name)            elif data_tag == 'ADDRESS1':                raw_html = raw_html.replace(match.group(0), state_pharmacy.address1)            elif data_tag == 'CITY':                raw_html = raw_html.replace(match.group(0), state_pharmacy.city)            elif data_tag == 'STATE':                raw_html = raw_html.replace(match.group(0), state_pharmacy.state)            elif data_tag == 'ZIP':                raw_html = raw_html.replace(match.group(0), state_pharmacy.zip)            elif data_tag == 'PHONE':                raw_html = raw_html.replace(match.group(0), state_pharmacy.phone)            elif data_tag == 'TTY_PHONE':                if state_pharmacy.tty_phone is not None:                    raw_html = raw_html.replace(match.group(0), state_pharmacy.tty_phone)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'FAX':                if state_pharmacy.fax is not None:                    raw_html = raw_html.replace(match.group(0), state_pharmacy.fax)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'EMAIL':                if state_pharmacy.email is not None:                    raw_html = raw_html.replace(match.group(0), state_pharmacy.email)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')            elif data_tag == 'WEBSITE':                raw_html = raw_html.replace(match.group(0), state_pharmacy.website)            elif data_tag == 'ACRONYM':                if state_pharmacy.acronym is not None:                    raw_html = raw_html.replace(match.group(0), state_pharmacy.acronym)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')                  elif first_tag == 'REG_AGENCY_NAME':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].name)                                        elif first_tag == 'REG_AGENCY_ADDRESS1':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].address1)        elif first_tag == 'REG_AGENCY_ADDRESS2':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].address2)                elif first_tag == 'REG_AGENCY_CITY':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].city)                        elif first_tag == 'REG_AGENCY_STATE':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].state)                elif first_tag == 'REG_AGENCY_ZIP':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].zip)                        elif first_tag == 'REG_AGENCY_PHONE':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].phone)                        elif first_tag == 'REG_AGENCY_TTY_PHONE':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                if reg_agency[0].tty_phone is not None:                    raw_html = raw_html.replace(match.group(0), reg_agency[0].tty_phone)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')                elif first_tag == 'REG_AGENCY_FAX':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                if reg_agency[0].fax is not None:                    raw_html = raw_html.replace(match.group(0), reg_agency[0].fax)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')                        elif first_tag == 'REG_AGENCY_EMAIL':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                if reg_agency[0].email is not None:                    raw_html = raw_html.replace(match.group(0), reg_agency[0].email)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')                        elif first_tag == 'REG_AGENCY_WEBSITE':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                raw_html = raw_html.replace(match.group(0), reg_agency[0].website)                elif first_tag == 'REG_AGENCY_ACRONYM':            reg_agency = UtilRegAgencies.objects.filter(id=int(data_tag))            if len(reg_agency) > 0:                if reg_agency[0].acronym is not None:                    raw_html = raw_html.replace(match.group(0), reg_agency[0].acronym)                else:                    raw_html = raw_html.replace(match.group(0), 'N/A')        elif first_tag == 'CURRENT_YEAR':            time = datetime.now()            raw_html = raw_html.replace(match.group(0), str(time.year))        elif first_tag == 'COURSE_TOOLBAR_DESC':            tags = UtilReplacementTags.objects.filter(id=124)            if len(tags) > 0:                raw_html = raw_html.replace(match.group(0), tags[0].description)        #container related data        elif first_tag == 'EMERGENCY_LOCATION':            if container.emergency_location is None or container.emergency_location == '':                raw_html = raw_html.replace(match.group(0), location.emergency_location)            else:                raw_html = raw_html.replace(match.group(0), container.emergency_location)        elif first_tag == 'HIPAA_NOTICE_LOCATION':            if container.hippa_notice_location is None or container.hippa_notice_location == '':                raw_html = raw_html.replace(match.group(0), location.hippa_notice_location)            else:                raw_html = raw_html.replace(match.group(0), container.hippa_notice_location)        elif first_tag == 'NUMBER_OF_FIRE_EXITS':            if container.no_of_fire_exists is None:                raw_html = raw_html.replace(match.group(0), str(location.no_of_fire_exists))            else:                raw_html = raw_html.replace(match.group(0), str(container.no_of_fire_exists))        elif first_tag == 'WHERE_WRITTEN_HAZARD_LOCATED':            if container.where_written_hazard_located is None or container.where_written_hazard_located == '':                raw_html = raw_html.replace(match.group(0), location.where_written_hazard_located)            else:                raw_html = raw_html.replace(match.group(0), container.where_written_hazard_located)        elif first_tag == 'WHEN_HAZARD_PROG_AVAILABLE':            if container.when_hazard_prog_available is None or container.when_hazard_prog_available == '':                raw_html = raw_html.replace(match.group(0), location.when_hazard_prog_available)            else:                raw_html = raw_html.replace(match.group(0), container.when_hazard_prog_available)        elif first_tag == 'WHERE_SAFETY_DATA_LOCATED':            if container.where_safety_data_located is None or container.where_safety_data_located == '':                raw_html = raw_html.replace(match.group(0), location.where_safety_data_located)            else:                raw_html = raw_html.replace(match.group(0), container.where_safety_data_located)        #location related data        elif first_tag == 'EER_LOCATION':            raw_html = raw_html.replace(match.group(0), location.eer_location)        elif first_tag == 'WHEN_EER_AVAILABLE':            raw_html = raw_html.replace(match.group(0), location.when_eer_available)        elif first_tag == 'EMR_LOCATION':            raw_html = raw_html.replace(match.group(0), location.emr_location)        elif first_tag == 'WHEN_EMR_AVAILABLE':            raw_html = raw_html.replace(match.group(0), location.when_emr_available)                   elif first_tag == 'JOB_TITLES_ORG_HAZARD_RISK':            job_titles = organization.job_titles.order_by('name').all()            table_html = """<table class="table table-bordered table-striped table-responsive table-condensed">                        <thead>                            <tr>                                <th>                                    <div class="th">Job Title</div>                                </th>                                <th>                                    <div class="th">HCE Risk</div>                                </th>                                <th>                                    <div class="th">TBE Risk</div>                                </th>                                <th>                                    <div class="th">All BBP Risk</div>                                </th>                                <th>                                    <div class="th">Some BBP Risk</div>                                </th>                            </tr>                        </thead>                        <tbody>                    """            user_job_title = request.user.core_user_profile.job_title            for job_title in job_titles:                 if user_job_title is not None and user_job_title == job_title:                    #Job title name                    table_row = '<tr><td class="col-lg-4" style="background:#98D7E5;">'                    table_row += job_title.name                                    table_row += '</td>'                                   #HCE Risk                    table_row += '<td class="col-lg-2 text-center" style="background:#98D7E5;">'                    if job_title.exposure_to_chemicals_id == 1:                        table_row += 'X'                                    table_row += '</td>'                                    #TBE Risk                    table_row += '<td class="col-lg-2 text-center" style="background:#98D7E5;">'                    if job_title.exposure_to_TB_id == 1:                        table_row += 'X'                    table_row += '</td>'                                    #BBP Risk                    table_row += '<td class="col-lg-2 text-center" style="background:#98D7E5;">'                    if job_title.all_occupational_exposure_id == 1:                        table_row += 'X'                    table_row += '</td>'                    #Some BBP Risk                    table_row += '<td class="col-lg-2 text-center" style="background:#98D7E5;">'                    if job_title.some_occupational_exposure_id == 1:                        table_row += 'X'                    table_row += '</td></tr>'                                    table_html += table_row                else:                    #Job title name                    table_row = '<tr><td class="col-lg-4">'                    table_row += job_title.name                                    table_row += '</td>'                                   #HCE Risk                    table_row += '<td class="col-lg-2 text-center">'                    if job_title.exposure_to_chemicals_id == 1:                        table_row += 'X'                                    table_row += '</td>'                                    #TBE Risk                    table_row += '<td class="col-lg-2 text-center">'                    if job_title.exposure_to_TB_id == 1:                        table_row += 'X'                    table_row += '</td>'                                    #BBP Risk                    table_row += '<td class="col-lg-2 text-center">'                    if job_title.all_occupational_exposure_id == 1:                        table_row += 'X'                    table_row += '</td>'                    #Some BBP Risk                    table_row += '<td class="col-lg-2 text-center">'                    if job_title.some_occupational_exposure_id == 1:                        table_row += 'X'                    table_row += '</td></tr>'                                    table_html += table_row            table_html += '</tbody></table>'            table_html += '<div class="callout callout-green"><h4>Legend</h4><p>HCE = Hazardous Chemical Exposure, TBE = Tuberculosis Exposure, BBP = Bloodborne Pathogen</p></div>'            raw_html = raw_html.replace(match.group(0), table_html)        elif first_tag == 'COURSE_NUMBER_TITLE':            course = CoreCourses.objects.get(id=int(data_tag))            html =  course.number + ',&nbsp;<b><i>' + course.name + '</i></b>'            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'CURRENT_DATE_LONG':            time = datetime.now()            html = time.strftime('%d %B, %Y');            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'CURRENT_DATE_SHORT':            time = datetime.now()            html = time.strftime('%m/%d/%Y');            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'CURRENT_WEEKDAY':            time = datetime.now()            html = time.strftime('%A');            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'CURRENT_MONTH_LONG':            time = datetime.now()            html = time.strftime('%B');            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'CURRENT_MONTH_ABBREVIATION':            time = datetime.now()            html = time.strftime('%b');            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'CURRENT_MONTH_INTEGER':            time = datetime.now()            html = time.strftime('%m');            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'OFFICIAL_TYPE_FIRST_NAME':            officials = officials.filter(official_type_id=int(data_tag), is_active=True)            html = ''            if len(officials) > 0:                html = officials[0].first_name            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'OFFICIAL_TYPE_LAST_NAME':            officials = officials.filter(official_type_id=int(data_tag), is_active=True)            html = ''            if len(officials) > 0:                html = officials[0].last_name            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'OFFICIAL_TYPE_JOBTITLE':            officials = officials.filter(official_type_id=int(data_tag), is_active=True)            html = ''            if len(officials) > 0:                html = officials[0].actual_job_title            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'OFFICIAL_TYPE_PHONE':            officials = officials.filter(official_type_id=int(data_tag), is_active=True)            html = ''            if len(officials) > 0:                html = officials[0].phone            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'OFFICIAL_TYPE_EMAIL':            officials = officials.filter(official_type_id=int(data_tag), is_active=True)            html = ''            if len(officials) > 0:                html = officials[0].email            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'CUSTOM_POLICY_TITLE':            custom_policies = container.custom_policies.filter(policies_titles_id=int(data_tag))            html = ''            if len(custom_policies) > 0:                html = custom_policies[0].custom_policy_title            raw_html = raw_html.replace(match.group(0), html)        elif first_tag == 'ORG_POLICY':            custom_policies = container.custom_policies.filter(policies_titles_id=int(data_tag))            html = ''            if len(custom_policies) > 0:                html = replace_tags(request, custom_policies[0].policy_raw_html)            raw_html = raw_html.replace(match.group(0), html)            return raw_html#replace if statementdef replace_if_statement(cond_string, raw_html, state, services_offered, accreditation_agency_id):    sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)            em = re.search('{% endif %}', raw_html)        while sm is not None and sm.start() < em.start():        raw_html = raw_html[:sm.start()] + \                    replace_if_statement(sm.group(1),                                          raw_html[sm.end():],                                          state,                                          services_offered,                                         accreditation_agency_id)        sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)         em = re.search('{% endif %}', raw_html)    if cond_string != '':        if eval(cond_string) == True:            raw_html = replace_elseif_statement1(raw_html[:em.end()], state, services_offered, accreditation_agency_id) + raw_html[em.end():]        else:            raw_html = raw_html[em.end():]    return raw_html#Replace if, else, elseif statementdef replace_elseif_statement1(cond_string, raw_html, state, services_offered, accreditation_agency_id):        sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)    em = re.search('{% elseif\\s*([^}]+)\\s*%}', raw_html)    is_replaced = False    while em is not None:        if eval(sm.group(1)) is True:                        return raw_html[sm.end():em.start()]                           else:            raw_html = raw_html[em.start():]                        raw_html = raw_html[:3] + raw_html[7:]            sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)        em = re.search('{% elseif\\s*([^}]+)\\s*%}', raw_html)            em = re.search('{% else %}', raw_html)    fm = re.search('{% endif %}', raw_html)         if em is not None:        if eval(sm.group(1)) is True:                        raw_html = raw_html[sm.end():em.start()]            return raw_html                           else:                        raw_html = raw_html[em.end():fm.start()]            return raw_html    else:        if eval(sm.group(1)) is True:            raw_html = raw_html[sm.end():fm.start()]            return raw_html        return ''#Replace if, else, elseif statementdef replace_elseif_statement(raw_html, state, services_offered, accreditation_agency_id):        sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)    em = re.search('{% elseif\\s*([^}]+)\\s*%}', raw_html)    is_replaced = False    while em is not None:        if eval(sm.group(1)) is True:                        return raw_html[sm.end():em.start()]                           else:            raw_html = raw_html[em.start():]                        raw_html = raw_html[:3] + raw_html[7:]            sm = re.search('{% if\\s*([^}]+)\\s*%}', raw_html)        em = re.search('{% elseif\\s*([^}]+)\\s*%}', raw_html)            em = re.search('{% else %}', raw_html)    fm = re.search('{% endif %}', raw_html)         if em is not None:        if eval(sm.group(1)) is True:                        raw_html = raw_html[sm.end():em.start()]            return raw_html                           else:                        raw_html = raw_html[em.end():fm.start()]            return raw_html    else:        if eval(sm.group(1)) is True:            raw_html = raw_html[sm.end():fm.start()]            return raw_html        return ''"""{{REG_AGENCY_NAME:1}}{{REG_AGENCY_ADDRESS1:1}}{{REG_AGENCY_CITY:1}}{{REG_AGENCY_STATE:1}}{{REG_AGENCY_ZIP:1}}{{REG_AGENCY_PHONE:1}}<if defined>{{REG_AGENCY_TTY_PHONE:1}}</><if defined>{{REG_AGENCY_FAX:1}}</><if defined>{{REG_AGENCY_EMAIL:1}}</>{{REG_AGENCY_WEBSITE:1}}<if defined>{{REG_AGENCY_ACRONYM:1}}</>USER:NAMEUSER:FIRST_NAMEUSER:LAST_NAMEUSER:EMAILORG:NAMEORG:ADD_DATEORG:ACTIVATION_DATEJOB:NAMEJOB:NAME_POSSESSIVEDEPARTMENT:NAMEDEPARTMENT:NO_OF_FIRE_EXISTSDEPARTMENT:WHERE_WRITTEN_HAZARD_LOCATEDDEPARTMENT:WHEN_HAZARD_PROG_AVAILABLEDEPARTMENT:WHERE_SAFETY_DATA_LOCATEDDEPARTMENT:EMERGENCY_LOCATIONDEPARTMENT:HIPPA_NOTICE_LOCATIONDEPARTMENT:IS_ACCREDITEDDEPARTMENT:HIPPA_NOTICE_LOCATIONDEPARTMENT:MIN_SCORE_GENERAL_KNOWLEDGEDEPARTMENT:MIN_SCORE_CONTINUING_EDUCATIONDEPARTMENT:MIN_SCORE_EMPLOYEE_COMPETENCYDEPARTMENT:MIN_SCORE_CUSTOM_COURSESLOCATION:SHORT_NAMELOCATION:STREET_ADDRESS_1LOCATION:STREET_ADDRESS_2LOCATION:CITYLOCATION:STATELOCATION:ZIP_CODELOCATION:PHONELOCATION:FAXLOCATION:NO_OF_FIRE_EXISTSLOCATION:WHERE_WRITTEN_HAZARD_LOCATEDLOCATION:WHEN_HAZARD_PROG_AVAILABLELOCATION:WHERE_SAFETY_DATA_LOCATEDLOCATION:EER_LOCATIONLOCATION:WHEN_EER_AVAILABLELOCATION:EMR_LOCATIONLOCATION:WHEN_EMR_AVAILABLELOCATION:HIPPA_NOTICE_LOCATIONLOCATION:EMERGENCY_LOCATIONLOCATION:USE_ELECTRONIC_POSTINGLOCATION:IS_ACCREDITEDLOCATION:ACCREDITATION_AGENCYLOCATION:MIN_SCORE_GENERAL_KNOWLEDGELOCATION:MIN_SCORE_CONTINUING_EDUCATIONLOCATION:MIN_SCORE_EMPLOYEE_COMPETENCYLOCATION:MIN_SCORE_CUSTOM_COURSESLOCATION:DEPARTMENTS_ENABLEDLOCATION:TOTAL_DEPARTMENTSLOCATION:IS_ACTIVE            {{OSHA:NAME}}{{OSHA:ADDRESS1}}{{OSHA:CITY}}{{OSHA:STATE}}{{OSHA:ZIP}}{{OSHA:PHONE}}<if defined>{{OSHA:TTY_PHONE}}</><if defined>{{OSHA:FAX}}</><if defined>{{OSHA:EMAIL}}</>{{OSHA:WEBSITE}}OSHA:ACRONYMJOB_TITLES_ORG_HAZARD_RISK"""def get_replace_resources(raw_html):    if raw_html == '' or raw_html == None:        return {}        pattern = '{{\s*([^} ]+)\s*}}'    regex = re.compile(pattern, re.IGNORECASE)        resource_ids = []        for match in regex.finditer(raw_html):        short_tag = match.group(1)        tags_list = short_tag.split(':')                first_tag = tags_list[0]                if len(tags_list) > 1:            data_tag = short_tag.split(':')[1]                if first_tag == "COURSE_RESOURCE_FORM" or first_tag == "COURSE_RESOURCE_LANG_FORM" or first_tag == "COURSE_RESOURCE_VIDEO" or first_tag == "COURSE_RESOURCE_PUBLICATION" or first_tag == "COURSE_RESOURCE_LANG_PUBLICATION":            try:                resource_ids.append(int(data_tag))            except ValueError:                data_tag = 0                    if len(resource_ids) > 0:        resources = CoreResources.objects.filter(id__in=resource_ids)    else:        resources = 0        return resources def base36encode(number):    """Encode number to string of alphanumeric characters (0 to z). (Code taken from Wikipedia)."""    if not isinstance(number, (int, long)):        raise TypeError('number must be an integer')    if number < 0:        raise ValueError('number must be positive')     #alphabet = '0123456789abcdefghijklmnopqrstuvwxyz'    alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'    base36 = ''    while number:        number, i = divmod(number, 36)        base36 = alphabet[i] + base36     return base36 or alphabet[0]  def base36decode(numstr):    """Convert a base-36 string (made of alphanumeric characters) to its numeric value."""    return int(numstr,36)def encryptnumber(number):    str_num = str(number)    encryption_obj = DES.new('8charkey')    if len(str_num) < 8:        for i in range(0, 8-len(str_num)):            str_num = '0' + str_num    #s = struct.Struct('10s')    #data = s.pack(*str_num)    data = base36encode(struct.unpack('<Q', encryption_obj.encrypt(str_num))[0])        return data    def decryptnumber(numstr):    encryption_obj = DES.new('8charkey')    data = encryption_obj.decrypt(struct.pack('<Q', base36decode(numstr)))    data = int(data)        return datadef highlight_glossary_words(glossary_words, raw_html):    soup = BeautifulSoup(raw_html)    for tag in soup.find_all('p'):        for glossary_word in glossary_words:            # pattern = '\b%s\b' % (glossary_word['word'])            #pattern_obj = re.compile(pattern, re.IGNORECASE)            regex = re.compile(r'\b(%s)\b' % (glossary_word['word']), re.IGNORECASE)            #regex.sub('<span class="highlight_glossary_word">' + glossary_word['word'] + '</span>', tag.text)            #glossary_word['definition']            tag.string = regex.sub(                '<span popover-triggerX="mouseenter" popover-placement="top" popover-title="' + glossary_word[                    'syllable'] + '"  popover="testing" class="highlight_glossary_word">' + "\\1" + '</span>', tag.text)    return highlight_glossary_words_add_definition(glossary_words, soup.prettify(formatter=None))def highlight_glossary_words_add_definition(glossary_words, raw_html):    soup = BeautifulSoup(raw_html)    for tag in soup.find_all('span'):        for glossary_word in glossary_words:            if glossary_word['word'].lower() == tag.text.lower():                if tag.parent.name != "span":                    tag['popover'] = glossary_word['definition']                elif tag.parent.name == "span":                    tag['popover'] = ""    return soup.prettify(formatter=None)def convert_timezone(time, user):        if time is not None:        user_timezone = user.core_user_profile.util_timezones                if user_timezone.DST == 'Y':            if is_dst(time.hour, time.day, time.month, time.weekday()) is True:                offset = user_timezone.UTC_DT            else:                offset = user_timezone.UTC_ST        else:            offset = user_timezone.UTC_ST        seconds = int(offset*3600)           delta = timedelta(seconds=seconds)            time = time + delta        time = time.replace(tzinfo=None)                return timedef convert_timezone_reverse(time, user):        if time is not None:        user_timezone = user.core_user_profile.util_timezones                if user_timezone.DST == 'Y':            if is_dst(time.hour, time.day, time.month, time.weekday()) is True:                offset = user_timezone.UTC_DT            else:                offset = user_timezone.UTC_ST        else:            offset = user_timezone.UTC_ST        seconds = int(offset*3600)           delta = timedelta(seconds=seconds)            time = time - delta        time = time.replace(tzinfo=None)                return timedef get_user_timezone_code(user):        user_timezone = user.core_user_profile.util_timezones    if user_timezone.DST == 'Y':        timezone_code = user_timezone.DT_Abbreviation    else:        timezone_code = user_timezone.ST_Abbreviation            return timezone_codedef is_dst(hour, day, month, dow):       dow = (dow + 1) % 7     #January, february, and december are out.    if month < 3 or month > 11:         return False    #April to October are in    if month > 3 and month < 11:        return True    previousSunday = day - dow    #In march, we are DST if our previous sunday was on or after the 8th.        if month == 3:         if previousSunday >= 8:            if day == previousSunday and previousSunday < 15 and hour < 2:                return False            return True            #In november we must be before the first sunday to be dst.    #That means the previous sunday must be before the 1st.    if previousSunday <= 0:        return True    if previousSunday <= 7 and day == previousSunday and hour < 2:                return True    return False"""    functions for count of items"""def get_images_count(request):    images_count = CoreImages.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']    return images_count    def get_accreditation_count(request, is_admin=False):    accreditation_count = 0    user_profile = request.user.core_user_profile    #organization = request.user.core_user_profile.core_organization.get(user_profiles__id=request.user.core_user_profile.id)    try:        organization = CoreOrganizations.objects.filter(id=user_profile.organization_id_number)    except Exception as e:        organization = []    if len(organization) > 0:        organization = organization[0]    else:        organization = CoreOrganizations.objects.get(id=1)        #if it's us as the company looking at this page, the number should be a total else calculate specific count for organization    if organization.id == 1 and is_admin == True:                accreditation_count += AccreditingAgencyTjcElements.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        accreditation_count += AccreditingAgencyAchc.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']               accreditation_count += AccreditingAgencyBocStandards.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        accreditation_count += AccreditingAgencyCteamEvidenceOfCompliance.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        accreditation_count += AccreditingAgencyHqaa.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']    else:        #get accreditation agency        if user_profile.department_id is not None:                            container = user_profile.department                       else:                            container = user_profile.location                if container.is_accredited_id == 1:            accreditation_agency_id = container.accreditation_agency_id                else:            accreditation_agency_id = 0        #calculate accreditation count        """        If their accrediting organization = 9, the number is maxcount from accrediting_agency_tjc_elements table.        If their accrediting organization = 11, the number is maxcount from accrediting_agency_achc table.        If their accrediting organization = 588, the number is maxcount from accrediting_agency_boc_standards table.        If their accrediting organization = 587, the number is maxcount from accrediting_agency_cteam_evidence_of_compliance table.        If their accrediting organization = 586, the number is maxcount from accrediting_agency_hqaa table.        """        if accreditation_agency_id == 9:            accreditation_count = AccreditingAgencyTjcElements.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        elif accreditation_agency_id == 11:            accreditation_count = AccreditingAgencyAchc.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        elif accreditation_agency_id == 588:                  accreditation_count = AccreditingAgencyBocStandards.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        elif accreditation_agency_id == 587:            accreditation_count = AccreditingAgencyCteamEvidenceOfCompliance.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        elif accreditation_agency_id == 586:            accreditation_count = AccreditingAgencyHqaa.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']        return accreditation_count        def get_glossary_words_count(request):    glossary_words_count = CoreGlossaryWords.objects.aggregate(number_of_entries=Count('id'))['number_of_entries']    return glossary_words_count    