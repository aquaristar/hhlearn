from django.views.generic import Viewfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom rest_framework import authentication, permissionsfrom apps.dashboard.models import *from apps.api.v1.courses.serializers import *from datetime import datetime, timedelta# This is main API class for courses. This will handle all the loading of courses.class APICourses(APIView):    def get(self, request, format=None):        is_monthly_saftey = self.request.QUERY_PARAMS.get('isMonthlySafety', None)        course_id = self.request.QUERY_PARAMS.get('courseID', None)        assignment_id = self.request.QUERY_PARAMS.get('assignmentID', None)        # lets het the page number. On intro page we don't need page number so pageNumber won't be passed and it's set to 0        page_number = self.request.QUERY_PARAMS.get('pageNumber', 0)                if is_monthly_saftey is None or course_id is None or assignment_id is None:            response = response_missing_fields()            raise ExceptionMissingFields(detail=response)        # we are adding try here just in case if query fails then db call doesn't show error.        try:            if is_monthly_saftey == '1':                assignment = CoreUserSafetyAssignments.objects.get(id=assignment_id, course_id=course_id,                                                                   user_profile_id=request.user.core_user_profile.id)            elif is_monthly_saftey == '0':                assignment = CoreUserAssignments.objects.get(id=assignment_id, course_id=course_id,                                                             user_profile_id=request.user.core_user_profile.id)            else:                response = response_monthly_safety_1_0()                raise ExceptionDefault(detail=response)            if assignment.resume_from_page is not None and page_number == 0:                page_number = assignment.resume_from_page            else:                assignment.resume_from_page = page_number                assignment.save()            course = assignment.course                        # we pass data to CourseSerializer which is django rest framework serializer class and will map our object accordingly.            course_serializer = CourseSerializer(course, context={'request': request, 'page_number': int(page_number)})        except Exception as e:            if hasattr(e, 'detail'):                response = e.detail            else:                response = dict()                response['message'] = str(e.message)                response['status'] = 'error'            raise ExceptionDefault(detail=response)        #get organization data        try:            organization = request.user.core_user_profile.core_organization.get(                user_profiles__id=request.user.core_user_profile.id)            org_serializer = OrganizationSerializer(organization)        except CoreCourses.DoesNotExist:            organization = None            org_serializer = OrganizationSerializer(organization)        #get user profile data        try:            user_profile = CoreUserProfiles.objects.get(id=request.user.core_user_profile.id)            user_profile_serializer = UserProfileSerializer(user_profile)        except user_profile_serializer.DoesNotExist:            user_profile = None            user_profile_serializer = UserProfileSerializer(user_profile)        #get state Cell phones data        try:            state_cell_phone_laws = UtilStateCellPhoneLaws.objects.all()            state_cell_phone_laws_serializer = UtilStateCellPhoneLawsSerializer(state_cell_phone_laws, many=True)        except state_cell_phone_laws.count() == 0:            state_cell_phone_laws = None            state_cell_phone_laws_serializer = UtilStateCellPhoneLawsSerializer(state_cell_phone_laws, many=True)                #get test type                test = CoreTests.objects.get(course_id=course_id)        content = {  # 'courseNumber': self.request.QUERY_PARAMS.get('courseNumber', None),                     'courseData': course_serializer.data,                     'orgData': org_serializer.data,                     'userData': user_profile_serializer.data,                     'utilData': {'state_cell_phone_laws': state_cell_phone_laws_serializer.data},                     'test_type': test.type.id        }        return Response(content)        def post(self, request, format=None):        course_id = self.request.DATA.get('course_id', None)        font_size = self.request.DATA.get('fontsize', None)        note = self.request.DATA.get('note', None)                if course_id is not None:            try:                # need to get logged in user.                user_profile = request.user.core_user_profile                if font_size is not None:                    user_profile.fontsize_id = int(font_size)                                if note is not None:                    user_note = CoreCoursesNote.objects.filter(user=request.user, courses_id=course_id)                                        if len(user_note) is 0:                        #purge date is after 30 days from current time                        date_to_purge = datetime.now() + timedelta(hours=720)                                                #create new note object                        user_note = CoreCoursesNote.objects.create(user=request.user,                                                                 courses_id=course_id,                                                                 notes=note,                                                                 date_to_purge=date_to_purge)                    else:                        user_note = user_note[0]                                                                user_note.notes = note                    user_note.save()                                    user_profile.save()                response = response_profile_save_successful()                    # if there's any exception then just send None data.            except:                    response = response_profile_save_successful()                    raise ExceptionUnknownError(detail=response)                        # finalizing our output content.            content = {  # sending success response                        'status': 'success',                         'response': response,            }        else:            content = {'status': 'fail',                       'response': 'CourseId should be defined!'                       }                # sending final response.        return Response(content)class APICourseStart(APIView):    def get(self, request, format=None):        try:            assignment_id = self.request.QUERY_PARAMS.get('assignmentID', None)            # need to check if this course id belongs to user or not?            course_id = self.request.QUERY_PARAMS.get('courseID', None)            # is it normal course type or safety course? because we have different table for each one.            monthly_safety_course = self.request.QUERY_PARAMS.get('monthlySafetyCourse', None)            # if it's a monthly safety course            if monthly_safety_course == '1':                try:                    #assignment = CoreUserSafetyAssignments.objects.get(Q(course_id=course_id) &                    #                                                   Q(user_profile_id=request.user.core_user_profile.id) &                    #                                                   ~Q(is_completed=True))                    assignment = CoreUserSafetyAssignments.objects.get(id=assignment_id)                                                             # mark assignment started and add last started date.                    if assignment.is_started is None or assignment.is_started is False:                        assignment.is_started = True                        assignment.last_started = datetime.now()                        assignment.save()                        response = response_course_started()                    # assignment is already started to just update last started date.                    elif assignment.is_started is True:                        assignment.last_started = datetime.now()                        assignment.save()                        response = response_course_started()                # assignment doesn't belong to user.                except CoreUserSafetyAssignments.DoesNotExist:                    assignment = None                    response = response_course_not_assigned()                    raise ExceptionDefault(detail=response)            # if it's a regular course/not a monthly safety course.            elif monthly_safety_course == '0':                try:                    #assignment = CoreUserAssignments.objects.get(Q(course_id=course_id) &                    #                                                   Q(user_profile_id=request.user.core_user_profile.id) &                    #                                                   ~Q(is_completed=True))                    assignment = CoreUserAssignments.objects.get(id=assignment_id)                    # mark assignment started and add last started date.                    if assignment.is_started is None or assignment.is_started is False:                        assignment.is_started = True                        assignment.last_started = datetime.now()                        assignment.save()                        response = response_course_started()                    # assignment is already started to just update last started date.                    elif assignment.is_started is True:                        assignment.last_started = datetime.now()                        assignment.save()                        response = response_course_started()                # assignment doesn't belong to user.                except CoreUserAssignments.DoesNotExist:                    assignment = None                    response = response_course_not_assigned()                    raise ExceptionDefault(detail=response)            else:                response = response_course_type_missing()                raise ExceptionMissingFields(detail=response)        except Exception as e:            if hasattr(e, 'detail'):                response = e.detail            else:                response = dict()                response['message'] = str(e.message)                response['status'] = 'error'            raise ExceptionDefault(detail=response)        content = {'response': response, }        return Response(content)class APIAssignmentCoursesList(APIView):    def get(self, request, format=None):        try:            user_id = self.request.QUERY_PARAMS.get('user_id', None)            user_profile = CoreUserProfiles.objects.get(id=user_id)            organization = user_profile.core_organization.get(user_profiles__id=user_profile.id)            courses = organization.courses.filter(monthly_safety_course_id=0, is_active=True).order_by('number')            #courses = courses | CoreOrganizationsCustomCourses.objects.filter(organization_id=organization.id).select_related(courses)            courses_data = CoursesListSerializer(courses, context={'user_profile': user_profile}).data        except Exception as e:            if hasattr(e, 'detail'):                response = e.detail            else:                response = dict()                response['message'] = str(e.message)                response['status'] = 'error'            raise ExceptionDefault(detail=response)        content = {'courses': courses_data, }        return Response(content)