from django.views.generic import Viewfrom rest_framework.views import APIViewfrom rest_framework.response import Responsefrom rest_framework import authentication, permissionsfrom rest_framework import serializersfrom apps.dashboard.models import *from apps.api.v1.utils.views import *from apps.api.v1.utils.exceptions import *from apps.api.v1.utils.responses import *from apps.api.v1.utils.helpers import *from apps.api.v1.history.serializers import *class APITestHistory(APIView):    def get(self, request, format=None):        #is_monthly_saftey = self.request.QUERY_PARAMS.get('isMonthlySafety', None)                user = request.user        test_attempts = CoreTestAttempts.objects.filter(user_id = user.id, passed=True)                #get courses from test attempts        courses = []                for test_attempt in test_attempts:            course = test_attempt.test.course            if course not in courses: #and test_attempt.test.type.id !=3:                courses.append(course)                courses_data = []                if len(courses) > 0:                                    for course in courses:                test_attempts = CoreTestAttempts.objects.filter(test__course__id = course.id, user_id = user.id)#.exclude(test__type__id=3)                course_serializer = { 'id':course.id, 'number':course.number, 'name':course.name, 'hours': course.hours, 'requires_additional_documentation': course.requires_additional_documentation }                course_testattempts =[]                for test_attempt in test_attempts:                    if test_attempt.grade_date_time is not None:                        course_testattempts.append(TestAttemptsSerializer(test_attempt, context={'request': request}).data)                        if test_attempt.passed is True:                                                        course_serializer['completed'] = convert_timezone(test_attempt.grade_date_time, user)                                                        #check test completed by due date                            course_serializer['completed_by_due_date'] = test_attempt.completed_by_due_date                                                        course_serializer['cert_encrypted_id'] = test_attempt.cert_encrypted_id                            course_serializer['taking_for_ce_credit'] = test_attempt.taking_for_ce_credit                course_serializer['test_attempts'] = course_testattempts                 courses_data.append(course_serializer)                #get timezone info        user_timezone = user.core_user_profile.util_timezones        if user_timezone.DST == 'Y':                        is_dst = True        else:                        is_dst = False        timezone_code = [user_timezone.ST_Abbreviation, user_timezone.DT_Abbreviation]                         #prepare inservices data        inservices = CoreInservicesCompleted.objects.all()        inservices_data = CompletedInserviceSerializer(inservices).data                #prepare external courses data        external_courses = CoreExternalCoursesCompleted.objects.all()        external_courses_data = CompletedExternalCourseSerializer(external_courses).data                                content = { 'courseData': courses_data,                    'tzCode': timezone_code,                    'isDst': is_dst,                    'inservicesData': inservices_data,                    'externalCourseData': external_courses_data,                     #'userData': user_profile_serializer.data,                     #'utilData': {'state_cell_phone_laws': state_cell_phone_laws_serializer.data},            }                return Response(content)class APITestAttempt(APIView):    def get(self, request, format=None):               test_attempt_id = self.request.QUERY_PARAMS.get('testAttemptID', None)                if test_attempt_id is None:                   response = response_missing_fields()                   raise ExceptionMissingFields(detail=response)               user = request.user                try:            test_attempt = CoreTestAttempts.objects.get(id = test_attempt_id)                        test_attempt_serializer = TestAttemptSerializer(test_attempt, context={'request': request})            content = { 'testAttemptData': test_attempt_serializer.data }                                except Exception as e:            if hasattr(e, 'detail'):                response = e.detail            else:                response = dict()                response['message'] = str(e.message)                response['status'] = 'error'            raise ExceptionDefault(detail=response)                return Response(content)        