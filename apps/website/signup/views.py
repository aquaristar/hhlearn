# Importing render module from djangofrom django.shortcuts import renderfrom django.core.urlresolvers import reverse# Importing redirect module from django.from django.http import HttpResponseRedirectfrom forms import *from django.contrib.auth.models import Userfrom django.contrib.auth.models import Groupfrom apps.utility.helpers import *from apps.dashboard.models import *from apps.utility.models import *from apps.api.v1.utils.helpers import *def signup(request):        if request.method == 'POST':        form = SignUpForm(request.POST)                if form.is_valid():            '''            # Well if form is valid then lets go create a user. I need to clean this code a bit :)            user = User.objects.create_user(form.data['user_name'], form.data['email_address'], form.data['password'])            user.first_name = form.data['first_name']            user.last_name = form.data['last_name']            # Lets select a group from database which user selected            selected_group = Group.objects.get(name='admin')            # Now we have group information now lets add that group to user using ID            user.groups.add(selected_group.id)            # We need to set user INACTIVE on registration because we want them to confirm email first            # So lets set is_active = 0            user.is_active = 0            # Now all we need to do is to save user model            user.save()            if user.id:                organization = CoreOrganizations()                organization.name = form.data['org_name']                # O means NO. we are just setting defaul values to NO on signup because if it's NULL then                # angularJS binding won't work properly.                organization.is_organization_accredited = UtilYesorNo.objects.get(value=0)                organization.is_entire_organization_accredited = UtilYesorNo.objects.get(value=0)                organization.is_accredited_by_same_agency = UtilYesorNo.objects.get(value=0)                organization.save()                location = CoreLocations()                location.street_address_1 = form.data['street_address_1']                location.street_address_2 = form.data['street_address_2']                location.city = form.data['city']                location.state = form.data['state']                location.zip_code = form.data['zip_code']                location.save()                point_of_contact = CorePointOfContacts()                point_of_contact.save()                # creating object for CoreUsers model and passing newly created user                # because it's the profile of that user and CoreUsers have OneToOne relation                # with user model.                #user_profile = CoreUserProfiles(user=user, organization=organization)                user_profile = CoreUserProfiles(user=user)                user_profile.activation_token = generate_random_string(10)                user_profile.requested_welcome_email = 1                # saving the user profile at this stage.                user_profile.save()                organization.locations.add(location)                organization.point_of_contacts.add(point_of_contact)                organization.user_profiles.add(user_profile)                # lets check if user was created or not?                if user_profile.id:                    # ok so user was created so lets send them email location confirmation token                    #send_signup_email(user, profile)                    #send_terms_email(request.session['username'])                    # if user selects to email terms of services then lets send email with term of services in it.                    send_templated_email(user.username, 'HHLEARN - Confirm Email', 'website/emails/signup_confirm_email.html', request,                                         user.email)                    # lets store the username in session for later stage for fetching user data                    request.session['username'] = user.username                    request.session['email'] = user.email                    # at this stage we also need to store the current signup stage                    # which will be used later.                    request.session['signup_contact_info_complete'] = True                    # ok we are all done here... now lets move user to next page on stage.                    # next page is accept_terms page in signup process.                    return HttpResponseRedirect(reverse('signup_terms'))                else:                    print 'profile not saved'            else:                print 'user not saved'            '''                        try:                zip_code = UtilZipCodes.objects.get(zip_code=form.data['zip_code'], city_name=form.data['city'])                state = UtilUSAStates.objects.get(name=form.data['state'])                CoreLeads.objects.create(lead_organization_name = form.data['org_name'],                                         lead_address1 = form.data['street_address_1'],                                         lead_address2 = form.data['street_address_2'],                                         lead_org_city = form.data['city'],                                         states_id = state.id,                                         county_id = zip_code.county_fips,                                         zip_codes_id = zip_code.id,                                         lead_first_name = form.data['first_name'],                                         lead_last_name = form.data['last_name'],                                         lead_email_address = form.data['email_address'],                                         lead_work_phone = form.data['work_phone'],                                         lead_add_date = datetime.now(),                                         lead_ip_address = get_client_ip(request),                                         lead_sources_id = form.data['lead_source'],                                         promo_codes_id = 1,)                request.session['signup_contact_info_complete'] = True                request.session['signup_contact_info'] = form.data                return HttpResponseRedirect(reverse('signup_terms'))            except Exception as e:                print 'form is not valid'        else:            print 'form is not valid'            else:        if request.session['signup_contact_info_complete'] == True:            form = SignUpForm(request.session['signup_contact_info'])        else:            form = SignUpForm()    # At the end we need to render the page and pass our form :)    return render(request, 'website/signup/new/index.html', {        'form': form,        'request': request,    })    def signup_terms(request):    """    # if request if POST then we need to process the form.    if request.method == 'POST':        # get all teh data form POST to form  SignUpFormTerms        form = SignUpFormTerms(request.POST)        if form.is_valid():            if form['email_terms'].data is True:                user = User.objects.get(username__iexact=request.session['username'])                user_profile = CoreUserProfiles.objects.get(user=user)                user_profile.requested_tos_email = 1                user_profile.save()                #send_terms_email(request.session['username'])                # if user selects to email terms of services then lets send email with term of services in it.                send_templated_email(request.session['username'], 'HHLEARN Terms and Condition of Use', 'website/emails/terms_of_services.html', request,                                     request.session['email'])            else:                print 'nothing just pass to next line of code.'            # ok we are all done here... now lets move user to next page on stage.            # next page is make_payment page in signup process.            request.session['signup_terms_complete'] = True            return HttpResponseRedirect(reverse('signup_payment'))        else:            print 'validation failed'    # if request is NOT post then lets load form simply    else:        form = SignUpFormTerms()    # At the end we need to render the page and pass our form :)    return render(request, 'website/signup/terms.html', {        'form': form,        'request': request,    })    """    return render(request, 'website/signup/new/terms.html', {'request':request})def signup_payment(request):    """    if request.method == 'POST':        form = SignUpPaymentForm(request.POST)        if form.is_valid():            from paypalrestsdk import Payment            username = request.session['username']            user_details = User.objects.get(username__iexact=username)            user_billing = CoreBilling(user_profile=user_details.user_profile)            user_billing.membership_plan = CorePlans(id=form.data['membership_plan'])            user_billing.user_pack = CoreUserPacks(id=form.data['user_pack'])            user_billing.payment_method = UtilPaymentMethods(id=form.data['payment_method'])            user_billing.credit_card_person_name = form.data['credit_card_person_name']            user_billing.credit_card_number = form.data['credit_card_number']            user_billing.card_expiry_month = form.data['card_expiry_month']            user_billing.card_expiry_year = form.data['card_expiry_year']            user_billing.billing_address_1 = form.data['billing_address_1']            user_billing.billing_address_2 = form.data['billing_address_2']            user_billing.city = form.data['city']            user_billing.state = form.data['state']            user_billing.zip_code = form.data['zip_code']            # saving the user billing at this stage.            user_billing.save()        else:            print 'form is not valid'    else:        form = SignUpPaymentForm()    # At the end we need to render the page and pass our form :)    return render(request, 'website/signup/payment.html', {        'form': form,        'request': request,    })    """    return render(request, 'website/signup/new/payment.html', {'request':request})def signup_thank_you(request):    """    user = User.objects.get(username__iexact=request.session['username'])    user_profile = CoreUserProfiles.objects.get(user=user)    if user_profile.requested_welcome_email == 1:        send_templated_email(request.session['username'], 'HHLEARN - Validate Your Email Address', 'website/emails/signup_confirm_email.html', request,                             request.session['email'])    if user_profile.requested_tos_email == 1:        send_templated_email(request.session['username'], 'HHLEARN Terms and Condition of Use', 'website/emails/terms_of_services.html', request,                             request.session['email'])    """    return render(request, 'website/signup/new/thank_you.html', {'request': request})def signup_confirm_email(request, activation_token):    """    this method is used for validation of email verification token sent to user    during signup process.    """    if CoreUserProfiles.objects.filter(activation_token__iexact=activation_token).exists():        user_details = CoreUserProfiles.objects.get(activation_token__iexact=activation_token)        #lets check if token is valid        if user_details.activation_token == activation_token:            # now activate the user            user_details.user.is_active = 1            user_details.activation_token = None            #lets save our changes. "user" represents the User model.            user_details.user.save()            user_details.save()            message = 'Your account has been successfully activated.'    else:        message = 'Invalid activation code.'    return render(request, 'website/signup/confirm_email.html', {'message': message})