# Importing render module from djangofrom django.shortcuts import render# this import will be used for redirection mainlyfrom django.core.urlresolvers import reverse# Importing redirect module from django.from django.http import HttpResponseRedirect# now lets import all the forms from forms.py file in this app# if forms are located somewhere else then we will need full path of app.from forms import *def region_4(request):	organization = request.user.core_user_profile.core_organization.get(user_profiles__id=request.user.core_user_profile.id)	total_locations = organization.locations.filter(departments_enabled=1).count()	location = organization.locations.filter(departments_enabled=1).order_by('id').reverse()[0]	total_departments_for_location = location.departments.count()	if total_departments_for_location == 0:		url_param_total_departments_for_location = 0	else:		url_param_total_departments_for_location =- 1	back_button_url = ''#reverse('admin_setup_department_3_1_5_questions', args=(total_locations - 1, url_param_total_departments_for_location))	# if request if POST then we need to process the form.	if request.method=='POST':		form = Region_4(request.POST)		if form.is_valid():			print 'validation passed'			organization.regions_enabled = form.cleaned_data['regions_enabled']			if organization.regions_enabled.value == 1:				organization.total_regions = form.cleaned_data['total_regions']			elif organization.regions_enabled.value == 0:				organization.total_regions = None			organization.save()			return HttpResponseRedirect(reverse('admin_setup_region_4_1'))		else:			print 'validation failed'	# if request is NOT post then lets load form simply	else:		form = Region_4()		form.fields['regions_enabled'].initial = organization.regions_enabled		form.fields['total_regions'].initial = organization.total_regions	return render(request, 'admin/setup/region/region_4.html', {'request': request, 'form': form, 'back_button_url': back_button_url})def region_4_1(request, region_number=0):	organization = request.user.core_user_profile.core_organization.get(user_profiles__id=request.user.core_user_profile.id)	total_regions_to_ask = organization.total_regions	if organization.regions_enabled.value == 0:		organization.regions.clear()		return HttpResponseRedirect(reverse('admin_setup_job_title_5_1'))	if organization.regions.all().count()==0:		for count in range(0, total_regions_to_ask):			region = CoreRegions()			region.save()			organization.regions.add(region)	list_of_regions = organization.regions.filter().order_by('id').values('id',									      'short_name')	region_number_int = int(region_number)	list_of_regions_int = int(total_regions_to_ask)	selected_region = list_of_regions[region_number_int]	if region_number_int <= list_of_regions_int and region_number_int != 0:		back_button_url = reverse('admin_setup_region_4_1_questions', args=(region_number_int-1,))	if region_number_int == 0:		back_button_url = reverse('admin_setup_region_4')	# if request if POST then we need to process the form.	if request.method == 'POST':		form = Region_4_1(request.POST, organization=organization)		if form.is_valid():			print 'validation passed'			region = organization.regions.get(id=form.cleaned_data['id'])			region.short_name = form.cleaned_data['short_name']			region.locations.clear()			for location in form.cleaned_data['locations']:				existing_location = CoreLocations.objects.get(id=location)				region.locations.add(existing_location)			region.save()			region.departments.clear()			for department in form.cleaned_data['departments']:				existing_department = CoreDepartments.objects.get(id=department)				region.departments.add(existing_department)			region.save()			region_number_int = region_number_int+1			if region_number_int < list_of_regions_int:				return HttpResponseRedirect(reverse('admin_setup_region_4_1_questions', args=(region_number_int,)))			if region_number_int == list_of_regions_int:				return HttpResponseRedirect(reverse('admin_setup_job_title_5_1'))		else:			print 'validation failed'	# if request is NOT post then lets load form simply	else:		form = Region_4_1(			initial=selected_region,			organization=organization		)	return render(		request,		'admin/setup/region/region_4_1.html',		{			'request': request,			'form': form,			'back_button_url': back_button_url		}	)